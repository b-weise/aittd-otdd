from dataclasses import dataclass
from datetime import datetime
from pathlib import Path

import keras
import pytest

from source.libs.baseTestCase import BaseTestCase
from source.libs.paramsManager import ParamsManager
from source.structs.customTypes import DateRange
from source.structs.params import (TrainingParamsCombinations as TrainParamsCombs,
                                   LayerParamsCombinations as LayerParamsCombs,
                                   TrainingParams as TrainParams, LayerParams as LayerParams)


@pytest.fixture
def new_instance() -> ParamsManager:
    return ParamsManager()


def test_instantiation_success(new_instance: ParamsManager):
    assert isinstance(new_instance, ParamsManager)


@dataclass
class UnfoldMethodTestCase(BaseTestCase):
    input_object: TrainParamsCombs
    expected_output: list[TrainParams]


UnfoldMethTC = UnfoldMethodTestCase


@pytest.mark.parametrize('test_case', [pytest.param(test_case, id=test_case.id) for test_case in [
    UnfoldMethTC(id='one combination only',
                 input_object=TrainParamsCombs(ColumnToPredict=['Oracle'],
                                               WindowWidth=[300],
                                               SetTrainingFlag=[True],
                                               UseResidualWrapper=[False],
                                               PrependBatchNormLayer=[True],
                                               FitMaxEpochs=[2],
                                               FitPatience=[50],
                                               CompileLossFunction=[keras.losses.MeanAbsoluteError],
                                               CompileOptimizer=[keras.optimizers.RMSprop],
                                               LayerStack=[{0: LayerParamsCombs(Units=[8])}],
                                               DatasetPath=[Path('dataset.csv')],
                                               DatasetTimeFilter=[DateRange()],
                                               DatasetShuffle=[True],
                                               DatasetBatchSize=[16]),
                 expected_output=[TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=8)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='e8f35b867ef7f0be3a142b2b1be0b8a3')]),
    UnfoldMethTC(input_object=TrainParamsCombs(ColumnToPredict=['Oracle'],
                                               WindowWidth=[300],
                                               SetTrainingFlag=[True],
                                               UseResidualWrapper=[False],
                                               PrependBatchNormLayer=[True],
                                               FitMaxEpochs=[2],
                                               FitPatience=[50],
                                               CompileLossFunction=[keras.losses.MeanAbsoluteError],
                                               CompileOptimizer=[keras.optimizers.RMSprop],
                                               LayerStack=[{0: LayerParamsCombs(Units=[8])}],
                                               DatasetPath=[Path('dataset.csv')],
                                               DatasetTimeFilter=[DateRange(fm=datetime(2025, 1, 1),
                                                                            to=datetime(2025, 1, 2))],
                                               DatasetShuffle=[True],
                                               DatasetBatchSize=[16]),
                 expected_output=[TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=8)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(fm=datetime(2025, 1, 1),
                                                                          to=datetime(2025, 1, 2)),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='076279deaff47201174e8a01524e3ce3')]),
    UnfoldMethTC(id='two combinations',
                 input_object=TrainParamsCombs(ColumnToPredict=['Oracle', 'Close'],
                                               WindowWidth=[300],
                                               SetTrainingFlag=[True],
                                               UseResidualWrapper=[False],
                                               PrependBatchNormLayer=[True],
                                               FitMaxEpochs=[2],
                                               FitPatience=[50],
                                               CompileLossFunction=[keras.losses.MeanAbsoluteError],
                                               CompileOptimizer=[keras.optimizers.RMSprop],
                                               LayerStack=[{0: LayerParamsCombs(Units=[8])}],
                                               DatasetPath=[Path('dataset.csv')],
                                               DatasetTimeFilter=[DateRange()],
                                               DatasetShuffle=[True],
                                               DatasetBatchSize=[16]),
                 expected_output=[TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=8)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='e8f35b867ef7f0be3a142b2b1be0b8a3'),
                                  TrainParams(ColumnToPredict='Close',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=8)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='e60694f0f9a3fe809730c8a2341fdc06')]),
    UnfoldMethTC(input_object=TrainParamsCombs(ColumnToPredict=['Oracle'],
                                               WindowWidth=[300],
                                               SetTrainingFlag=[True],
                                               UseResidualWrapper=[False],
                                               PrependBatchNormLayer=[True],
                                               FitMaxEpochs=[2],
                                               FitPatience=[50],
                                               CompileLossFunction=[keras.losses.MeanAbsoluteError],
                                               CompileOptimizer=[keras.optimizers.RMSprop],
                                               LayerStack=[{0: LayerParamsCombs(Units=[8])}],
                                               DatasetPath=[Path('dataset.csv')],
                                               DatasetTimeFilter=[DateRange(fm=datetime(2025, 1, 1),
                                                                            to=datetime(2025, 1, 2)),
                                                                  DateRange(fm=datetime(2025, 2, 1),
                                                                            to=datetime(2025, 2, 2))],
                                               DatasetShuffle=[True],
                                               DatasetBatchSize=[16]),
                 expected_output=[TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=8)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(fm=datetime(2025, 1, 1),
                                                                          to=datetime(2025, 1, 2)),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='076279deaff47201174e8a01524e3ce3'),
                                  TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=8)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(fm=datetime(2025, 2, 1),
                                                                          to=datetime(2025, 2, 2)),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='940d02e333c87fbeaa48e7a38be46cfa')]),
    UnfoldMethTC(id='multiple layer stacks',
                 input_object=TrainParamsCombs(ColumnToPredict=['Oracle'],
                                               WindowWidth=[300],
                                               SetTrainingFlag=[True],
                                               UseResidualWrapper=[False],
                                               PrependBatchNormLayer=[True],
                                               FitMaxEpochs=[2],
                                               FitPatience=[50],
                                               CompileLossFunction=[keras.losses.MeanAbsoluteError],
                                               CompileOptimizer=[keras.optimizers.RMSprop],
                                               LayerStack=[{0: LayerParamsCombs(Units=[32])},
                                                           {0: LayerParamsCombs(Units=[0]),
                                                            1: LayerParamsCombs(Units=[8],
                                                                                KernelInitializer=[keras.initializers.Zeros,
                                                                                                   keras.initializers.Ones])},
                                                           {0: LayerParamsCombs(Units=[0]),
                                                            1: LayerParamsCombs(Units=[8, 16])}],
                                               DatasetPath=[Path('dataset.csv')],
                                               DatasetTimeFilter=[DateRange()],
                                               DatasetShuffle=[True],
                                               DatasetBatchSize=[16]),
                 expected_output=[TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=32)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='62ffd59ca111561847cb325e2684e1a5'),
                                  TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=0),
                                                          1: LayerParams(Units=8,
                                                                         KernelInitializer=keras.initializers.Zeros)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='a6296cd057933c96c028d423e0cad491'),
                                  TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=0),
                                                          1: LayerParams(Units=8,
                                                                         KernelInitializer=keras.initializers.Ones)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='bd4995cea945e9f17c9a7940ab39bc4b'),
                                  TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=0),
                                                          1: LayerParams(Units=8)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='9d010b25d30c4efbb3901d64491813ac'),
                                  TrainParams(ColumnToPredict='Oracle',
                                              WindowWidth=300,
                                              SetTrainingFlag=True,
                                              UseResidualWrapper=False,
                                              PrependBatchNormLayer=True,
                                              FitMaxEpochs=2,
                                              FitPatience=50,
                                              CompileLossFunction=keras.losses.MeanAbsoluteError,
                                              CompileOptimizer=keras.optimizers.RMSprop,
                                              LayerStack={0: LayerParams(Units=0),
                                                          1: LayerParams(Units=16)},
                                              DatasetPath=Path('dataset.csv'),
                                              DatasetTimeFilter=DateRange(),
                                              DatasetShuffle=True,
                                              DatasetBatchSize=16,
                                              Hash='042d837ee2b3242d1e4c2e86348bd0e8')]),
]])
def test_unfold_success(new_instance: ParamsManager, test_case: UnfoldMethodTestCase):
    computed_output = new_instance.unfold(test_case.input_object)
    assert len(computed_output) == len(test_case.expected_output)
    for computed_item, expected_item in zip(computed_output, test_case.expected_output):
        assert computed_item == expected_item
